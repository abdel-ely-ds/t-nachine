export const HOME_PATH = "/";
export const LOGIN_PATH = "/login";
export const SIGNUP_PATH = "/signup";
export const BACKTEST_PATH = "/backtest";

export const dummyStrategy =
  'from numpy.random import choice\nfrom t_nachine.backtester import Strategy\nfrom t_nachine.candlesticks import Candle\nfrom t_nachine.risk import RiskManger\nfrom t_nachine.strategies.utils import add_attrs, get_candles, build_attr_dict\n\nWAIT = 1  # cancel pending orders after 1 day\nP_BUY = 0.1  # probability to buy\n\nRISK_PER_TRADE = 0.01\nRISK_TO_REWARD = 2.0\n\n\nclass DummyStrategy(Strategy):\n    def init(self):\n\n        # Risk manager\n        self.wait = WAIT\n        self.p_buy = P_BUY\n        self.risk_to_reward = RISK_TO_REWARD\n        self.risk_per_trade = RISK_PER_TRADE\n        self.risk_manager = RiskManger(\n            risk_to_reward=self.risk_to_reward, risk_per_trade=self.risk_per_trade\n        )\n\n    def cancel(self) -> None:\n        """\n        wait until <self.wait> days then cancel order if not executed\n        """\n        for order in self.orders:\n            if (\n                    not order.is_contingent\n                    and len(self.data) - order.placed_bar >= self.wait\n            ):\n                order.cancel()\n\n    def buy_signal(self, candle0: Candle, candle1: Candle) -> bool:\n\n        return candle1.low < candle0.high and choice(["buy", "sell"], 1, p=[self.p_buy, 1 - self.p_buy]) == "buy"\n\n    def next(self):\n        # cancel pending orders\n        self.cancel()\n        # add attributes\n        for trade in self.trades:\n            add_attrs(\n                trade=trade,\n                high=self.data.High[-1],\n                low=self.data.Low[-1],\n                **build_attr_dict(self.data),\n            )\n\n        candle0, candle1 = get_candles(self.data, days=2)  # today and yesterday candle\n        if self.buy_signal(candle0, candle1):\n            # entries and exits and number of shares\n            stop, limit, sl, tp = self.risk_manager.compute_entry_exit(\n                above_price=candle0.high, below_price=candle1.low\n            )\n            size = self.risk_manager.shares(self.equity, stop, sl)\n            order = self.buy(stop=stop, limit=limit, sl=sl, tp=tp, size=size)\n            setattr(order, "placed_bar", len(self.data))\n';
